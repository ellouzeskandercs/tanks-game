{"version":3,"sources":["game/angle.ts","game/constants.ts","game/rectangle.ts","game/bullet.ts","game/tank.ts","game/game.tsx","App.js","reportWebVitals.js","index.js"],"names":["ANGLE_UNIT","preloadImages","name","path","width","height","Angle","value","unit","this","sin","cos","angle","RADIANS","Math","PI","DEGREES","transformToRadians","transformToDegrees","Error","a","b","transformToUnit","factor","Rectangle","position","rotation","origin","translationVector","newPostion","x","y","newRotationCenter","sum","leftBottom","leftTop","rightTop","rightBottom","rotatedRotationOrigin","map","point","pointVector","vectorAngle","atan","vectorLen","sqrt","newPointVector","multiply","line","slope","direction","yIntercept","top","right","bottom","left","rect","isPointInside","Bullet","scene","velocity","_scene","_collidedTimes","_bulletObject","add","sprite","physics","world","enable","body","setVelocity","object","Tank","getObjectTrigoCoordinates","originX","originY","tank","setBulletObjectCollider","overlap","object1","object2","histTest","bulletRectangle","_getObjectAsRectangle","obstacleRectangle","bulletHitsObstacle","getBounds","reduce","acc","obstacleHitsBullet","intersection","intersectWithLine","center","maxCollisionTimes","reflect","destroy","velocityTrigoCoord","reflectedVelocity","velocityAngle","destroyed","_containerObject","_vehicleObject","_cannonObject","_velocity","_angularVelocity","container","setSize","setOrigin","addAt","bulletHitTest","cannonRectangle","vehicleRectangle","cannonHitsObstacle","vehicleHitsObstacle","obstacleHitsVehicle","obstacleHitsCannon","colliderHitTest","pushDirection","pushTank","directionVector","distance","vehiculeAngle","sign","abs","Phaser","Between","directionAngle","angleDiff","setAngularVelocity","cannonAngle","bulletStartPoint","Game","cursors","obstacles","config","type","AUTO","parent","preload","forEach","imagetoLoad","load","image","create","input","keyboard","createCursorKeys","staticGroup","setObstacleCollider","update","cursorsDirections","up","isDown","down","stop","moveToDirection","DIRECTIONS","_","isEqual","TOP","TOPRIGHT","RIGHT","BOTTOMRIGHT","BOTTOM","BOTTOMLEFT","LEFT","TOPLEFT","getDirectionAngle","mousePointer","game","pointCannonToPoint","leftButtonDown","bullet","fire","setTimeout","setColliderWithTank","default","arcade","debug","className","id","icon","faArrowsAlt","faMouse","faMousePointer","Component","App","class","aria-current","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.187a929c.chunk.js","sourcesContent":["export class Angle {\n    public static transformToRadians(angle: Angle): Angle{\n        if (angle.unit === ANGLE_UNIT.RADIANS) {\n            return angle\n        }\n        return new Angle(angle.value * Math.PI/ 180, ANGLE_UNIT.RADIANS);\n    }\n    public static transformToDegrees(angle: Angle): Angle{\n        if (angle.unit === ANGLE_UNIT.DEGREES) {\n            return angle\n        }\n        return new Angle(angle.value * 180/ Math.PI, ANGLE_UNIT.DEGREES);\n    }\n    public static transformToUnit(angle: Angle, unit: ANGLE_UNIT): Angle{\n        if (angle.unit === unit) {\n            return angle\n        } else if (unit === ANGLE_UNIT.RADIANS){\n            return Angle.transformToRadians(angle)\n        } else {\n            return Angle.transformToDegrees(angle)\n        }\n    }\n    public static sin(angle: Angle): number{\n        if(angle.unit === ANGLE_UNIT.DEGREES){\n            return Math.sin(angle.value * Math.PI / 180)\n        }\n        if(angle.unit === ANGLE_UNIT.RADIANS){\n            return Math.sin(angle.value)\n        }\n        throw new Error('Could not compute sinus of this angle: unit was not radians or degrees')\n    }\n\n    public static cos(angle: Angle): number{\n        if(angle.unit === ANGLE_UNIT.DEGREES){\n            return Math.cos(angle.value * Math.PI / 180)\n        }\n        if(angle.unit === ANGLE_UNIT.RADIANS){\n            return Math.cos(angle.value)\n        }\n        throw new Error('Could not compute cosinus of this angle: unit was not radians or degrees')\n    }\n    public static sum(a: Angle, b: Angle): Angle {\n        return new Angle(a.value + Angle.transformToUnit(b, a.unit).value, a.unit);\n    }\n    public static multiply(a: Angle, factor: number): Angle {\n        return new Angle(a.value * factor, a.unit);\n    }\n\n    public value: number;\n    public unit: ANGLE_UNIT;\n    constructor(value: number, unit: ANGLE_UNIT){\n        this.value = value;\n        this.unit = unit;\n    }\n    public sin(): number {\n        return Angle.sin(this)\n    }\n    public cos(): number {\n        return Angle.cos(this)\n    }\n}\n\nexport enum ANGLE_UNIT {\n    DEGREES = 'degrees',\n    RADIANS = 'radians'\n}","export interface assetImage {\n    name: string,\n    path: string,\n    width: number,\n    height: number\n} \n\nconst tankImage: assetImage = {\n    name: 'tank',\n    path: 'tanks-game/assets/tank.png',\n    width: 40,\n    height: 30\n}\n\nconst obstacleImage: assetImage = {\n    name: 'obstacle',\n    path: '/tanks-game/assets/obstacle.png',\n    width: 274,\n    height: 82\n}\n\nconst cannonImage: assetImage = {\n    name: 'cannon',\n    path: '/tanks-game/assets/cannon.png',\n    width: 40,\n    height: 10\n}\n\nconst backgroundImage: assetImage = {\n    name: 'background',\n    path: '/tanks-game/assets/background.png',\n    width: 800,\n    height: 500\n}\n\nconst bulletImage: assetImage = {\n    name: 'bullet',\n    path: '/tanks-game/assets/bullet.png',\n    width: 15,\n    height: 8\n}\n\nexport const preloadImages: assetImage[] = [tankImage, obstacleImage, cannonImage, backgroundImage, bulletImage] ","import { Angle, ANGLE_UNIT } from './angle';\nimport { Line } from './line';\nimport { Point, Vector } from './point';\n\nexport class Rectangle {\n    /* To do refacto after creatinng class Vector */\n\n    public static isPointInside(rect: Rectangle, point: Point): boolean {\n        return rect.isPointInside(point);\n    } \n\n    public position: Point;\n    public width: number;\n    public height: number;\n    public rotation: IRectangleRotation;\n\n    constructor(\n        position: Point, \n        height: number, \n        width: number, \n        rotation?: IRectangleRotation){\n        this.position = position;\n        this.width = width;\n        this.height = height;\n        this.rotation = rotation ?? { angle : new Angle(0, ANGLE_UNIT.DEGREES), origin: position };\n    }\n\n    public translate(translationVector: Vector): Rectangle {\n        const newPostion: Point = { x: this.position.x + translationVector.x, y: this.position.y + translationVector.y }; \n        const newRotationCenter: Point = { x: this.rotation.origin.x + translationVector.x, y: this.rotation.origin.y + translationVector.y }; \n        return new Rectangle(\n            newPostion,\n            this.height,\n            this.width,\n            { origin: newRotationCenter, angle: this.rotation.angle }\n        )\n    }\n\n    public rotate(angle: Angle): Rectangle {\n        return new Rectangle(\n            this.position,\n            this.height,\n            this.width,\n            { origin: this.rotation.origin, angle: Angle.sum(this.rotation.angle, angle)}\n        )\n    }\n\n    public getBounds(): Point[] {\n        const leftBottom = {\n            x: this.position.x, \n            y: this.position.y\n        }\n        const leftTop = { \n            x: this.position.x - this.height * this.rotation.angle.sin(), \n            y: this.position.y + this.height * this.rotation.angle.cos() \n        };\n        const rightTop = { \n            x: this.position.x + this.width * this.rotation.angle.cos() - this.height * this.rotation.angle.sin(), \n            y: this.position.y + this.width * this.rotation.angle.sin() + this.height * this.rotation.angle.cos()\n        };\n        const rightBottom = { \n            x: this.position.x + this.width * this.rotation.angle.cos(), \n            y: this.position.y + this.width * this.rotation.angle.sin(), \n        };\n        const rotatedRotationOrigin = {\n            x: (this.rotation.origin.x - this.position.x) * this.rotation.angle.cos() - (this.rotation.origin.y - this.position.y) * this.rotation.angle.sin(), \n            y: (this.rotation.origin.x - this.position.x) * this.rotation.angle.sin() + (this.rotation.origin.y - this.position.y) * this.rotation.angle.cos()            \n        }\n        return([leftBottom, leftTop, rightTop, rightBottom].map((point) =>({\n            x: point.x + this.rotation.origin.x - this.position.x - rotatedRotationOrigin.x,\n            y: point.y + this.rotation.origin.y - this.position.y - rotatedRotationOrigin.y\n        })))\n    }\n\n    public isPointInside(point : Point): boolean {\n        const pointVector = {\n            x: (point.x - this.rotation.origin.x),\n            y: (point.y - this.rotation.origin.y),\n        }   \n\n        const vectorAngle = (pointVector.x ? ( pointVector.x > 0 ? Math.atan( pointVector.y / pointVector.x): Math.PI + Math.atan( pointVector.y / pointVector.x) ): (pointVector.x > 0 ? 0 : Math.PI));\n        const vectorLen = (Math.sqrt(pointVector.x ** 2 + pointVector.y **2));\n\n        const newPointVector = {\n            x: vectorLen * Angle.sum(Angle.multiply(this.rotation.angle, -1), new Angle(vectorAngle, ANGLE_UNIT.RADIANS)).cos() + this.rotation.origin.x - this.position.x,\n            y: vectorLen * Angle.sum(Angle.multiply(this.rotation.angle, -1), new Angle(vectorAngle, ANGLE_UNIT.RADIANS)).sin() + this.rotation.origin.y - this.position.y\n        }\n\n        return(newPointVector.x < this.width && newPointVector.y < this.height && newPointVector.x > 0 && newPointVector.y > 0);\n    } \n\n    public intersectWithLine(line: Line): any{\n        const pointVector = {\n            x: (line.point.x - this.rotation.origin.x),\n            y: (line.point.y - this.rotation.origin.y),\n        }   \n\n        const vectorAngle = (pointVector.x ? ( pointVector.x > 0 ? Math.atan( pointVector.y / pointVector.x): Math.PI + Math.atan( pointVector.y / pointVector.x) ): (pointVector.x > 0 ? 0 : Math.PI));\n        const vectorLen = (Math.sqrt(pointVector.x ** 2 + pointVector.y **2));\n\n        const newPointVector = {\n            x: vectorLen * Angle.sum(Angle.multiply(this.rotation.angle, -1), new Angle(vectorAngle, ANGLE_UNIT.RADIANS)).cos() + this.rotation.origin.x - this.position.x,\n            y: vectorLen * Angle.sum(Angle.multiply(this.rotation.angle, -1), new Angle(vectorAngle, ANGLE_UNIT.RADIANS)).sin() + this.rotation.origin.y - this.position.y\n        }\n\n        const slope = line.direction.y / line.direction.x; /* To do should also rotate the direction vector */\n        const yIntercept = newPointVector.y - slope * newPointVector.x;\n\n        const intersection = {\n            top: (this.height - yIntercept) / slope > 0 && (this.height - yIntercept) / slope < this.width,\n            right: slope * this.width + yIntercept > 0 && slope * this.width + yIntercept < this.height,\n            bottom:  -yIntercept / slope > 0 && -yIntercept/ slope < this.width,\n            left: yIntercept > 0 && yIntercept < this.height,\n        }\n\n        return(intersection)\n    }\n}\n\nexport interface IRectangleRotation {\n    angle: Angle,\n    origin: Point\n}","import Phaser from 'phaser';\nimport { Angle, ANGLE_UNIT } from './angle';\nimport { Point, Vector } from './point';\nimport { Rectangle } from './rectangle';\nimport { Tank } from './tank';\n\nexport class Bullet {\n    public static maxCollisionTimes: number = 2;\n\n    private _scene: Phaser.Scene;\n    private _collidedTimes: number = 0;\n    private _bulletObject: Phaser.Types.Physics.Arcade.SpriteWithDynamicBody;\n\n    constructor(scene: Phaser.Scene, position: Point, velocity: number, angle: Angle) {\n        this._scene = scene;\n        this._bulletObject = this._scene.add.sprite(position.x, position.y, 'bullet') as Phaser.Types.Physics.Arcade.SpriteWithDynamicBody;\n        this._scene.physics.world.enable(this._bulletObject);\n        this._bulletObject.body.setVelocity(velocity * angle.cos(), velocity * angle.sin());\n        this._bulletObject.rotation = Angle.transformToRadians(angle).value;\n    }\n\n    private _getObjectAsRectangle(object: Phaser.Physics.Arcade.Sprite): Rectangle {\n        const rotation = { \n            origin: Tank.getObjectTrigoCoordinates({ \n                x: object.body.x + object.originX * object.width,\n                y: object.body.y + object.originY * object.height\n            }),\n            angle: new Angle(- object.angle, ANGLE_UNIT.DEGREES)\n        }\n        const rectangle = new Rectangle(Tank.getObjectTrigoCoordinates(object.body.position), object.body.width, object.body.height, rotation);\n        return rectangle;\n    }\n\n    public setColliderWithTank(tank: Tank) {\n        tank.setBulletObjectCollider(this._bulletObject)\n    }\n\n    public setObstacleCollider(object: Phaser.GameObjects.GameObject | Phaser.GameObjects.GameObject[] | Phaser.GameObjects.Group | Phaser.GameObjects.Group[]) {\n        this._scene.physics.add.overlap(this._bulletObject, object, (object1, object2) => this.histTest(object1, object2))\n    }\n\n    public histTest(object1: Phaser.Types.Physics.Arcade.GameObjectWithBody, object2: Phaser.Types.Physics.Arcade.GameObjectWithBody): void {\n        const bulletRectangle = this._getObjectAsRectangle(this._bulletObject);\n        const obstacleRectangle = new Rectangle(Tank.getObjectTrigoCoordinates(object2.body.position), object2.body.width, object2.body.height)\n\n        const bulletHitsObstacle = bulletRectangle.getBounds().reduce((acc:boolean, point: Point) => obstacleRectangle.isPointInside(point) || acc, false);\n        const obstacleHitsBullet = obstacleRectangle.getBounds().reduce((acc:boolean, point: Point) => bulletRectangle.isPointInside(point) || acc, false);\n        \n        if(bulletHitsObstacle || obstacleHitsBullet){\n            const intersection = obstacleRectangle.intersectWithLine({\n                point: Tank.getObjectTrigoCoordinates(this._bulletObject.body.center),\n                direction:  Tank.getObjectTrigoCoordinates(this._bulletObject.body.velocity)\n            });\n            if(this._collidedTimes < Bullet.maxCollisionTimes){\n                this.reflect(intersection);\n                this._collidedTimes = this._collidedTimes + 1;\n            } else {\n                this._bulletObject.destroy()\n            }\n        }\n    }\n\n    public reflect(intersection: any): void {\n        const velocityTrigoCoord: Vector = Tank.getObjectTrigoCoordinates(this._bulletObject.body.velocity);\n        const reflectedVelocity: Vector = {\n            x: (velocityTrigoCoord.x > 0 ? intersection.left : intersection.right) ? - velocityTrigoCoord.x: velocityTrigoCoord.x,\n            y: (velocityTrigoCoord.y > 0 ? intersection.bottom : intersection.top) ? - velocityTrigoCoord.y: velocityTrigoCoord.y,\n        }\n        const velocityAngle = (reflectedVelocity.x ? ( reflectedVelocity.x > 0 ? Math.atan( reflectedVelocity.y / reflectedVelocity.x): Math.PI + Math.atan( reflectedVelocity.y / reflectedVelocity.x) ): (reflectedVelocity.x > 0 ? 0 : Math.PI));\n\n        this._bulletObject.body.setVelocity(reflectedVelocity.y, reflectedVelocity.x)\n        this._bulletObject.rotation = (Math.PI/2) - velocityAngle;\n    }\n    \n}","import Phaser from 'phaser';\nimport { Angle, ANGLE_UNIT } from './angle'\nimport { Rectangle } from './rectangle';\nimport { Point, Vector } from './point';\nimport { Bullet } from './bullet';\n\nexport class Tank {\n    public static getObjectTrigoCoordinates(point: Point): Point{\n        /* To do move this to other helper */\n        return ({\n            x: point.y,\n            y: point.x\n        })\n    }\n\n    public destroyed: boolean = false;\n    private _containerObject: Phaser.GameObjects.Container;\n    private _vehicleObject: Phaser.Types.Physics.Arcade.SpriteWithDynamicBody;\n    private _cannonObject: Phaser.Types.Physics.Arcade.SpriteWithDynamicBody;\n    private _scene: Phaser.Scene;\n    private _velocity: number = 160;\n    private _angularVelocity: number = 80;\n\n    constructor(scene: Phaser.Scene, x: number = 0, y:number = 0) {\n        /* To do use point for x y coord */\n        this._scene = scene;\n\n        this._containerObject = this._scene.add.container(x, y);\n        this._containerObject.setSize(80,80)\n\n        this._vehicleObject = this._scene.add.sprite(0, 0, 'tank') as Phaser.Types.Physics.Arcade.SpriteWithDynamicBody;\n\n        this._cannonObject = this._scene.add.sprite(0, 0, 'cannon') as Phaser.Types.Physics.Arcade.SpriteWithDynamicBody;\n        this._cannonObject.setOrigin(0, 0.5);\n\n        this._scene.physics.world.enable(this._containerObject);\n        this._scene.physics.world.enable(this._vehicleObject);\n        this._scene.physics.world.enable(this._cannonObject);\n\n        this._containerObject.addAt(this._vehicleObject, 0);\n        this._containerObject.addAt(this._cannonObject, 1);\n    }\n\n    private _getObjectAsRectangle(object: Phaser.Physics.Arcade.Sprite): Rectangle {\n        const rotation = { \n            origin: Tank.getObjectTrigoCoordinates({ \n                x: object.body.x + object.originX * object.width,\n                y: object.body.y + object.originY * object.height\n            }),\n            angle: new Angle(- object.angle, ANGLE_UNIT.DEGREES)\n        }\n        const rectangle = new Rectangle(Tank.getObjectTrigoCoordinates(object.body.position), object.body.width, object.body.height, rotation);\n        return rectangle;\n    }\n\n    public setBulletObjectCollider(object: Phaser.GameObjects.GameObject | Phaser.GameObjects.GameObject[] | Phaser.GameObjects.Group | Phaser.GameObjects.Group[]) {\n        this._scene.physics.add.overlap(this._containerObject, object, (object1, object2) => this.bulletHitTest(object1, object2))\n    }\n\n    public bulletHitTest(object1: Phaser.Types.Physics.Arcade.GameObjectWithBody, object2: Phaser.Types.Physics.Arcade.GameObjectWithBody) {\n        const cannonRectangle = this._getObjectAsRectangle(this._cannonObject);\n        const vehicleRectangle = this._getObjectAsRectangle(this._vehicleObject);\n        const bulletRectangle = new Rectangle(Tank.getObjectTrigoCoordinates(object2.body.position), object2.body.width, object2.body.height)\n\n        const cannonHitsObstacle = cannonRectangle.getBounds().reduce((acc:boolean, point: Point) => bulletRectangle.isPointInside(point) || acc, false);\n        const vehicleHitsObstacle = vehicleRectangle.getBounds().reduce((acc:boolean, point: Point) => bulletRectangle.isPointInside(point) || acc, false);\n        const obstacleHitsVehicle = bulletRectangle.getBounds().reduce((acc:boolean, point: Point) => vehicleRectangle.isPointInside(point) || acc, false);\n        const obstacleHitsCannon = bulletRectangle.getBounds().reduce((acc:boolean, point: Point) => cannonRectangle.isPointInside(point) || acc, false);\n        \n        if(cannonHitsObstacle || obstacleHitsCannon || vehicleHitsObstacle || obstacleHitsVehicle){\n            this.destroy();\n        }\n    }\n\n    public setObstacleCollider(object: Phaser.GameObjects.GameObject | Phaser.GameObjects.GameObject[] | Phaser.GameObjects.Group | Phaser.GameObjects.Group[]) {\n        this._scene.physics.add.overlap(this._containerObject, object, (object1, object2) => this.colliderHitTest(object1, object2))\n    }\n\n    public colliderHitTest(object1: Phaser.Types.Physics.Arcade.GameObjectWithBody, object2: Phaser.Types.Physics.Arcade.GameObjectWithBody): void {\n        const cannonRectangle = this._getObjectAsRectangle(this._cannonObject);\n        const vehicleRectangle = this._getObjectAsRectangle(this._vehicleObject);\n        const obstacleRectangle = new Rectangle(Tank.getObjectTrigoCoordinates(object2.body.position), object2.body.width, object2.body.height)\n\n        const cannonHitsObstacle = cannonRectangle.getBounds().reduce((acc:boolean, point: Point) => obstacleRectangle.isPointInside(point) || acc, false);\n        const vehicleHitsObstacle = vehicleRectangle.getBounds().reduce((acc:boolean, point: Point) => obstacleRectangle.isPointInside(point) || acc, false);\n        const obstacleHitsVehicle = obstacleRectangle.getBounds().reduce((acc:boolean, point: Point) => vehicleRectangle.isPointInside(point) || acc, false);\n        const obstacleHitsCannon = obstacleRectangle.getBounds().reduce((acc:boolean, point: Point) => cannonRectangle.isPointInside(point) || acc, false);\n        \n        if(cannonHitsObstacle || obstacleHitsCannon || vehicleHitsObstacle || obstacleHitsVehicle){\n            const pushDirection: Vector = {\n                x: this._containerObject.x - object2.body.center.x,\n                y: this._containerObject.y - object2.body.center.y\n            }\n            this.pushTank(pushDirection, 3);\n        }\n    }\n    \n    public pushTank(directionVector: Vector, distance: number): void {\n        const vehiculeAngle: Angle = new Angle(this._vehicleObject.angle, ANGLE_UNIT.DEGREES);\n\n        this._containerObject.x = this._containerObject.x + Math.sign(directionVector.x) * Math.abs(vehiculeAngle.cos()) * distance;\n        this._containerObject.y = this._containerObject.y + Math.sign(directionVector.y) * Math.abs(vehiculeAngle.sin()) * distance;\n    }\n\n    public pointCannonToPoint(x: number, y: number) {\n        this._cannonObject.rotation = Phaser.Math.Angle.Between(this._containerObject.x, this._containerObject.y, x, y);\n    }\n\n    public moveToDirection(directionAngle: Angle) {\n        const vehiculeAngle: Angle = new Angle(this._vehicleObject.angle, ANGLE_UNIT.DEGREES);\n        const angleDiff: Angle = Angle.sum(vehiculeAngle, Angle.multiply(directionAngle, -1))\n        if (angleDiff.sin()**2 < 0.01 && angleDiff.cos()**2 > 0.81) {\n            this._vehicleObject.body.setAngularVelocity(0);\n            (this._containerObject.body as Phaser.Physics.Arcade.Body).setVelocity(directionAngle.cos() * this._velocity, directionAngle.sin() * this._velocity);\n        } else {\n            this._vehicleObject.body.setAngularVelocity(angleDiff.sin() * angleDiff.cos() < 0 ? this._angularVelocity : -this._angularVelocity);\n            (this._containerObject.body as Phaser.Physics.Arcade.Body).setVelocity(0, 0);\n        }        \n    }\n\n    public fire(x: number, y: number): Bullet {\n        /* to do use the point class as input */\n        const cannonAngle = new Angle(Phaser.Math.Angle.Between(this._containerObject.x, this._containerObject.y, x, y), ANGLE_UNIT.RADIANS);\n        const bulletStartPoint: Point = {\n            x: (this._containerObject.body as Phaser.Physics.Arcade.Body).center.x + cannonAngle.cos() * this._cannonObject.body.width,\n            y: (this._containerObject.body as Phaser.Physics.Arcade.Body).center.y + cannonAngle.sin() * this._cannonObject.body.width\n        }\n        const bullet = new Bullet(\n            this._scene, \n            bulletStartPoint, \n            250, \n            cannonAngle)\n        return bullet;\n    }\n\n    public stop() {\n        this._vehicleObject.body.setAngularVelocity(0);\n        (this._containerObject.body as Phaser.Physics.Arcade.Body).setVelocity(0, 0);\n    }\n\n    public destroy() {\n        this.destroyed = true;\n        this._vehicleObject.destroy()\n        this._cannonObject.destroy()\n        this._containerObject.destroy()\n    }\n}","import './game.scss';\nimport { Component } from 'react';\nimport Phaser from 'phaser';\nimport { preloadImages } from './constants';\nimport { Tank } from './tank';\nimport _ from 'lodash';\nimport { Angle, ANGLE_UNIT } from './angle'\nimport { Bullet } from './bullet';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faArrowsAlt, faMouse, faMousePointer } from '@fortawesome/free-solid-svg-icons'\n\nfunction getDirectionAngle([top, right, bottom, left]: boolean[]): Angle{\n    enum DIRECTIONS {\n        TOP = -90,\n        TOPRIGHT = -45,\n        RIGHT = 0,\n        BOTTOMRIGHT = 45,\n        BOTTOM = 90,\n        BOTTOMLEFT = 135,\n        LEFT = 180,\n        TOPLEFT = -135,\n    }\n    if(_.isEqual([top, right, bottom, left], [true,false,false,false])) { return (new Angle(DIRECTIONS.TOP, ANGLE_UNIT.DEGREES)); } \n    if(_.isEqual([top, right, bottom, left], [true,true,false,false])) { return (new Angle(DIRECTIONS.TOPRIGHT, ANGLE_UNIT.DEGREES)); } \n    if(_.isEqual([top, right, bottom, left], [false,true,false,false])) { return (new Angle(DIRECTIONS.RIGHT, ANGLE_UNIT.DEGREES)); } \n    if(_.isEqual([top, right, bottom, left], [false,true,true,false])) { return (new Angle(DIRECTIONS.BOTTOMRIGHT, ANGLE_UNIT.DEGREES)); } \n    if(_.isEqual([top, right, bottom, left], [false,false,true,false])) { return (new Angle(DIRECTIONS.BOTTOM, ANGLE_UNIT.DEGREES)); } \n    if(_.isEqual([top, right, bottom, left], [false,false,true,true])) { return (new Angle(DIRECTIONS.BOTTOMLEFT, ANGLE_UNIT.DEGREES)); } \n    if(_.isEqual([top, right, bottom, left], [false,false,false,true])) { return (new Angle(DIRECTIONS.LEFT, ANGLE_UNIT.DEGREES)); } \n    if(_.isEqual([top, right, bottom, left], [true,false,false,true])) { return (new Angle(DIRECTIONS.TOPLEFT, ANGLE_UNIT.DEGREES)); } \n    throw new Error('Could not find the direction angle form input');\n}\n\nexport class Game extends Component {\n    componentDidMount() {\n        let tank: Tank;\n        let cursors: Phaser.Types.Input.Keyboard.CursorKeys;\n        let obstacles: Phaser.GameObjects.Group\n\n        const config = {\n            type: Phaser.AUTO,\n            width: 800,\n            height: 500,\n            parent: 'game-canvas',\n            scene: {\n                preload: preload,\n                create: create,\n                update: update\n            },\n            physics: {\n                default: 'arcade',\n                arcade: {\n                    debug: false\n                }\n            },\n        };\n\n        var game = new Phaser.Game(config);\n        \n        function preload(this: Phaser.Scene) {\n            preloadImages.forEach((imagetoLoad) => this.load.image(imagetoLoad.name, imagetoLoad.path))\n        }\n        \n        function create(this: Phaser.Scene) {\n            this.add.image(400, 250, 'background');\n\n            cursors = this.input.keyboard.createCursorKeys();\n\n            obstacles = this.physics.add.staticGroup();\n            obstacles.create(400, 350, 'obstacle');\n            obstacles.create(200, 150, 'obstacle');\n            obstacles.create(550, 150, 'obstacle');\n\n            tank = new Tank(this, 25, 20);\n            tank.setObstacleCollider(obstacles);\n        }\n        \n        function update(this: Phaser.Scene) {\n            if (!tank.destroyed) {\n                let cursorsDirections = [cursors.up.isDown, cursors.right.isDown, cursors.down.isDown, cursors.left.isDown];\n                if(cursorsDirections[0] && cursorsDirections[2] || cursorsDirections[1] && cursorsDirections[3] || !cursorsDirections.reduce((a, b) => a || b, false)){\n                    tank.stop();\n                } else {\n                    tank.moveToDirection(getDirectionAngle(cursorsDirections))\n                }\n                let mousePointer = this.game.input.mousePointer;\n                tank.pointCannonToPoint(mousePointer.x, mousePointer.y); \n                if (mousePointer.leftButtonDown()) {\n                    const bullet: Bullet = tank.fire(mousePointer.x, mousePointer.y);\n                    bullet.setObstacleCollider(obstacles);\n                    setTimeout(() => {\n                        bullet.setColliderWithTank(tank);\n                    }, 500);\n                }\n            }\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"game-container\"> \n                <div className=\"d-flex\">\n                    <div id=\"game-canvas\"></div>\n                    <div className=\"game-commands\">\n                        <div className=\"game-command\"> <FontAwesomeIcon icon={faArrowsAlt} className=\"fa-w-16 command-icon\"/> Move Tank </div>\n                        <div className=\"game-command\"> <FontAwesomeIcon icon={faMouse} className=\"fa-w-16 command-icon\"/> Left click to shoot bullets </div>\n                        <div className=\"game-command\"> <FontAwesomeIcon icon={faMousePointer} className=\"fa-w-16 command-icon\"/> Move mouse to move the cannon </div>\n                    </div>\n                </div>\n            </div>)\n    }\n}","import 'bootstrap/dist/css/bootstrap.css';\nimport './App.scss';\nimport { Game } from './game/game.tsx'\n\n\nfunction App() {\n  return (\n    <div className=\"app-container\">\n      <header class=\"w-75\">\n        <h3 class=\"float-md-start mb-0\">Tanks Game</h3>\n        <nav class=\"nav nav-masthead justify-content-center float-md-end\">\n          <a class=\"nav-link active\" aria-current=\"page\" href=\"#\">Play</a>\n          <a class=\"nav-link\" href=\"#\">Best scores</a>\n          <a class=\"nav-link\" href=\"#\">Forum</a>\n        </nav>\n      </header>\n      <Game/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}