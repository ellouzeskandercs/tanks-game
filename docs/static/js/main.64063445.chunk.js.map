{"version":3,"sources":["game/angle.ts","game/assets/constants.ts","game/rectangle.ts","game/bullet.ts","game/tank.ts","game/scenes/gameScene.ts","game/scenes/initScene.ts","game/game.tsx","App.js","reportWebVitals.js","index.js"],"names":["ANGLE_UNIT","Angle","value","unit","this","sin","cos","angle","RADIANS","Math","PI","DEGREES","transformToRadians","transformToDegrees","Error","a","b","transformToUnit","factor","initPreloadImages","initBackgroundImage","name","path","width","height","gamePreloadImages","tankImage","obstacleImage","cannonImage","backgroundImage","bulletImage","Rectangle","position","rotation","origin","translationVector","newPostion","x","y","newRotationCenter","sum","leftBottom","leftTop","rightTop","rightBottom","rotatedRotationOrigin","map","point","pointVector","vectorAngle","atan","vectorLen","sqrt","newPointVector","multiply","line","slope","direction","yIntercept","top","right","bottom","left","rect","isPointInside","Bullet","scene","velocity","_scene","_collidedTimes","_bulletObject","add","sprite","physics","world","enable","body","setVelocity","object","Tank","getObjectTrigoCoordinates","originX","originY","tank","setBulletObjectCollider","overlap","object1","object2","histTest","bulletRectangle","_getObjectAsRectangle","obstacleRectangle","bulletHitsObstacle","getBounds","reduce","acc","obstacleHitsBullet","intersection","intersectWithLine","center","maxCollisionTimes","reflect","destroy","velocityTrigoCoord","reflectedVelocity","velocityAngle","destroyed","_containerObject","_vehicleObject","_cannonObject","_velocity","_angularVelocity","container","setSize","setOrigin","addAt","bulletHitTest","cannonRectangle","vehicleRectangle","cannonHitsObstacle","vehicleHitsObstacle","obstacleHitsVehicle","obstacleHitsCannon","colliderHitTest","pushDirection","pushTank","directionVector","distance","vehiculeAngle","sign","abs","Phaser","Between","directionAngle","angleDiff","setAngularVelocity","cannonAngle","bulletStartPoint","GameScene","obstacles","cursors","Object","values","forEach","imagetoLoad","load","image","input","keyboard","createCursorKeys","staticGroup","create","setObstacleCollider","switch","cursorsDirections","up","isDown","down","stop","moveToDirection","DIRECTIONS","_","isEqual","TOP","TOPRIGHT","RIGHT","BOTTOMRIGHT","BOTTOM","BOTTOMLEFT","LEFT","TOPLEFT","getDirectionAngle","mousePointer","game","pointCannonToPoint","leftButtonDown","bullet","fire","setTimeout","setColliderWithTank","Scene","InitScene","text","setInteractive","useHandCursor","on","_startGame","Game","config","type","AUTO","parent","default","arcade","debug","gameScene","initScene","start","className","id","icon","faArrowsAlt","faMouse","faMousePointer","Component","App","class","aria-current","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.64063445.chunk.js","sourcesContent":["export class Angle {\n    public static transformToRadians(angle: Angle): Angle{\n        if (angle.unit === ANGLE_UNIT.RADIANS) {\n            return angle\n        }\n        return new Angle(angle.value * Math.PI/ 180, ANGLE_UNIT.RADIANS);\n    }\n    public static transformToDegrees(angle: Angle): Angle{\n        if (angle.unit === ANGLE_UNIT.DEGREES) {\n            return angle\n        }\n        return new Angle(angle.value * 180/ Math.PI, ANGLE_UNIT.DEGREES);\n    }\n    public static transformToUnit(angle: Angle, unit: ANGLE_UNIT): Angle{\n        if (angle.unit === unit) {\n            return angle\n        } else if (unit === ANGLE_UNIT.RADIANS){\n            return Angle.transformToRadians(angle)\n        } else {\n            return Angle.transformToDegrees(angle)\n        }\n    }\n    public static sin(angle: Angle): number{\n        if(angle.unit === ANGLE_UNIT.DEGREES){\n            return Math.sin(angle.value * Math.PI / 180)\n        }\n        if(angle.unit === ANGLE_UNIT.RADIANS){\n            return Math.sin(angle.value)\n        }\n        throw new Error('Could not compute sinus of this angle: unit was not radians or degrees')\n    }\n\n    public static cos(angle: Angle): number{\n        if(angle.unit === ANGLE_UNIT.DEGREES){\n            return Math.cos(angle.value * Math.PI / 180)\n        }\n        if(angle.unit === ANGLE_UNIT.RADIANS){\n            return Math.cos(angle.value)\n        }\n        throw new Error('Could not compute cosinus of this angle: unit was not radians or degrees')\n    }\n    public static sum(a: Angle, b: Angle): Angle {\n        return new Angle(a.value + Angle.transformToUnit(b, a.unit).value, a.unit);\n    }\n    public static multiply(a: Angle, factor: number): Angle {\n        return new Angle(a.value * factor, a.unit);\n    }\n\n    public value: number;\n    public unit: ANGLE_UNIT;\n    constructor(value: number, unit: ANGLE_UNIT){\n        this.value = value;\n        this.unit = unit;\n    }\n    public sin(): number {\n        return Angle.sin(this)\n    }\n    public cos(): number {\n        return Angle.cos(this)\n    }\n}\n\nexport enum ANGLE_UNIT {\n    DEGREES = 'degrees',\n    RADIANS = 'radians'\n}","export interface assetImage {\n    name: string,\n    path: string,\n    width: number,\n    height: number\n} \n\nconst tankImage: assetImage = {\n    name: 'tank',\n    path: '/tanks-game/assets/tank.png',\n    width: 40,\n    height: 30\n}\n\nconst obstacleImage: assetImage = {\n    name: 'obstacle',\n    path: '/tanks-game/assets/obstacle.png',\n    width: 274,\n    height: 82\n}\n\nconst cannonImage: assetImage = {\n    name: 'cannon',\n    path: '/tanks-game/assets/cannon.png',\n    width: 40,\n    height: 10\n}\n\nconst backgroundImage: assetImage = {\n    name: 'background',\n    path: '/tanks-game/assets/background.png',\n    width: 800,\n    height: 500\n}\n\nconst bulletImage: assetImage = {\n    name: 'bullet',\n    path: '/tanks-game/assets/bullet.png',\n    width: 15,\n    height: 8\n}\n\nconst initBackgroundImage: assetImage = {\n    name: 'init-background',\n    path: '/tanks-game/assets/init-background.png',\n    width: 800,\n    height: 500\n}\n\nexport const initPreloadImages: Record<string, assetImage> = { initBackgroundImage } \nexport const gamePreloadImages: Record<string, assetImage> = { tankImage, obstacleImage, cannonImage, backgroundImage, bulletImage } ","import { Angle, ANGLE_UNIT } from './angle';\nimport { Line } from './line';\nimport { Point, Vector } from './point';\n\nexport class Rectangle {\n    /* To do refacto after creatinng class Vector */\n\n    public static isPointInside(rect: Rectangle, point: Point): boolean {\n        return rect.isPointInside(point);\n    } \n\n    public position: Point;\n    public width: number;\n    public height: number;\n    public rotation: IRectangleRotation;\n\n    constructor(\n        position: Point, \n        height: number, \n        width: number, \n        rotation?: IRectangleRotation){\n        this.position = position;\n        this.width = width;\n        this.height = height;\n        this.rotation = rotation ?? { angle : new Angle(0, ANGLE_UNIT.DEGREES), origin: position };\n    }\n\n    public translate(translationVector: Vector): Rectangle {\n        const newPostion: Point = { x: this.position.x + translationVector.x, y: this.position.y + translationVector.y }; \n        const newRotationCenter: Point = { x: this.rotation.origin.x + translationVector.x, y: this.rotation.origin.y + translationVector.y }; \n        return new Rectangle(\n            newPostion,\n            this.height,\n            this.width,\n            { origin: newRotationCenter, angle: this.rotation.angle }\n        )\n    }\n\n    public rotate(angle: Angle): Rectangle {\n        return new Rectangle(\n            this.position,\n            this.height,\n            this.width,\n            { origin: this.rotation.origin, angle: Angle.sum(this.rotation.angle, angle)}\n        )\n    }\n\n    public getBounds(): Point[] {\n        const leftBottom = {\n            x: this.position.x, \n            y: this.position.y\n        }\n        const leftTop = { \n            x: this.position.x - this.height * this.rotation.angle.sin(), \n            y: this.position.y + this.height * this.rotation.angle.cos() \n        };\n        const rightTop = { \n            x: this.position.x + this.width * this.rotation.angle.cos() - this.height * this.rotation.angle.sin(), \n            y: this.position.y + this.width * this.rotation.angle.sin() + this.height * this.rotation.angle.cos()\n        };\n        const rightBottom = { \n            x: this.position.x + this.width * this.rotation.angle.cos(), \n            y: this.position.y + this.width * this.rotation.angle.sin(), \n        };\n        const rotatedRotationOrigin = {\n            x: (this.rotation.origin.x - this.position.x) * this.rotation.angle.cos() - (this.rotation.origin.y - this.position.y) * this.rotation.angle.sin(), \n            y: (this.rotation.origin.x - this.position.x) * this.rotation.angle.sin() + (this.rotation.origin.y - this.position.y) * this.rotation.angle.cos()            \n        }\n        return([leftBottom, leftTop, rightTop, rightBottom].map((point) =>({\n            x: point.x + this.rotation.origin.x - this.position.x - rotatedRotationOrigin.x,\n            y: point.y + this.rotation.origin.y - this.position.y - rotatedRotationOrigin.y\n        })))\n    }\n\n    public isPointInside(point : Point): boolean {\n        const pointVector = {\n            x: (point.x - this.rotation.origin.x),\n            y: (point.y - this.rotation.origin.y),\n        }   \n\n        const vectorAngle = (pointVector.x ? ( pointVector.x > 0 ? Math.atan( pointVector.y / pointVector.x): Math.PI + Math.atan( pointVector.y / pointVector.x) ): (pointVector.x > 0 ? 0 : Math.PI));\n        const vectorLen = (Math.sqrt(pointVector.x ** 2 + pointVector.y **2));\n\n        const newPointVector = {\n            x: vectorLen * Angle.sum(Angle.multiply(this.rotation.angle, -1), new Angle(vectorAngle, ANGLE_UNIT.RADIANS)).cos() + this.rotation.origin.x - this.position.x,\n            y: vectorLen * Angle.sum(Angle.multiply(this.rotation.angle, -1), new Angle(vectorAngle, ANGLE_UNIT.RADIANS)).sin() + this.rotation.origin.y - this.position.y\n        }\n\n        return(newPointVector.x < this.width && newPointVector.y < this.height && newPointVector.x > 0 && newPointVector.y > 0);\n    } \n\n    public intersectWithLine(line: Line): any{\n        const pointVector = {\n            x: (line.point.x - this.rotation.origin.x),\n            y: (line.point.y - this.rotation.origin.y),\n        }   \n\n        const vectorAngle = (pointVector.x ? ( pointVector.x > 0 ? Math.atan( pointVector.y / pointVector.x): Math.PI + Math.atan( pointVector.y / pointVector.x) ): (pointVector.x > 0 ? 0 : Math.PI));\n        const vectorLen = (Math.sqrt(pointVector.x ** 2 + pointVector.y **2));\n\n        const newPointVector = {\n            x: vectorLen * Angle.sum(Angle.multiply(this.rotation.angle, -1), new Angle(vectorAngle, ANGLE_UNIT.RADIANS)).cos() + this.rotation.origin.x - this.position.x,\n            y: vectorLen * Angle.sum(Angle.multiply(this.rotation.angle, -1), new Angle(vectorAngle, ANGLE_UNIT.RADIANS)).sin() + this.rotation.origin.y - this.position.y\n        }\n\n        const slope = line.direction.y / line.direction.x; /* To do should also rotate the direction vector */\n        const yIntercept = newPointVector.y - slope * newPointVector.x;\n\n        const intersection = {\n            top: (this.height - yIntercept) / slope > 0 && (this.height - yIntercept) / slope < this.width,\n            right: slope * this.width + yIntercept > 0 && slope * this.width + yIntercept < this.height,\n            bottom:  -yIntercept / slope > 0 && -yIntercept/ slope < this.width,\n            left: yIntercept > 0 && yIntercept < this.height,\n        }\n\n        return(intersection)\n    }\n}\n\nexport interface IRectangleRotation {\n    angle: Angle,\n    origin: Point\n}","import Phaser from 'phaser';\nimport { Angle, ANGLE_UNIT } from './angle';\nimport { Point, Vector } from './point';\nimport { Rectangle } from './rectangle';\nimport { Tank } from './tank';\n\nexport class Bullet {\n    public static maxCollisionTimes: number = 2;\n\n    private _scene: Phaser.Scene;\n    private _collidedTimes: number = 0;\n    private _bulletObject: Phaser.Types.Physics.Arcade.SpriteWithDynamicBody;\n\n    constructor(scene: Phaser.Scene, position: Point, velocity: number, angle: Angle) {\n        this._scene = scene;\n        this._bulletObject = this._scene.add.sprite(position.x, position.y, 'bullet') as Phaser.Types.Physics.Arcade.SpriteWithDynamicBody;\n        this._scene.physics.world.enable(this._bulletObject);\n        this._bulletObject.body.setVelocity(velocity * angle.cos(), velocity * angle.sin());\n        this._bulletObject.rotation = Angle.transformToRadians(angle).value;\n    }\n\n    private _getObjectAsRectangle(object: Phaser.Physics.Arcade.Sprite): Rectangle {\n        const rotation = { \n            origin: Tank.getObjectTrigoCoordinates({ \n                x: object.body.x + object.originX * object.width,\n                y: object.body.y + object.originY * object.height\n            }),\n            angle: new Angle(- object.angle, ANGLE_UNIT.DEGREES)\n        }\n        const rectangle = new Rectangle(Tank.getObjectTrigoCoordinates(object.body.position), object.body.width, object.body.height, rotation);\n        return rectangle;\n    }\n\n    public setColliderWithTank(tank: Tank) {\n        tank.setBulletObjectCollider(this._bulletObject)\n    }\n\n    public setObstacleCollider(object: Phaser.GameObjects.GameObject | Phaser.GameObjects.GameObject[] | Phaser.GameObjects.Group | Phaser.GameObjects.Group[]) {\n        this._scene.physics.add.overlap(this._bulletObject, object, (object1, object2) => this.histTest(object1, object2))\n    }\n\n    public histTest(object1: Phaser.Types.Physics.Arcade.GameObjectWithBody, object2: Phaser.Types.Physics.Arcade.GameObjectWithBody): void {\n        const bulletRectangle = this._getObjectAsRectangle(this._bulletObject);\n        const obstacleRectangle = new Rectangle(Tank.getObjectTrigoCoordinates(object2.body.position), object2.body.width, object2.body.height)\n\n        const bulletHitsObstacle = bulletRectangle.getBounds().reduce((acc:boolean, point: Point) => obstacleRectangle.isPointInside(point) || acc, false);\n        const obstacleHitsBullet = obstacleRectangle.getBounds().reduce((acc:boolean, point: Point) => bulletRectangle.isPointInside(point) || acc, false);\n        \n        if(bulletHitsObstacle || obstacleHitsBullet){\n            const intersection = obstacleRectangle.intersectWithLine({\n                point: Tank.getObjectTrigoCoordinates(this._bulletObject.body.center),\n                direction:  Tank.getObjectTrigoCoordinates(this._bulletObject.body.velocity)\n            });\n            if(this._collidedTimes < Bullet.maxCollisionTimes){\n                this.reflect(intersection);\n                this._collidedTimes = this._collidedTimes + 1;\n            } else {\n                this._bulletObject.destroy()\n            }\n        }\n    }\n\n    public reflect(intersection: any): void {\n        const velocityTrigoCoord: Vector = Tank.getObjectTrigoCoordinates(this._bulletObject.body.velocity);\n        const reflectedVelocity: Vector = {\n            x: (velocityTrigoCoord.x > 0 ? intersection.left : intersection.right) ? - velocityTrigoCoord.x: velocityTrigoCoord.x,\n            y: (velocityTrigoCoord.y > 0 ? intersection.bottom : intersection.top) ? - velocityTrigoCoord.y: velocityTrigoCoord.y,\n        }\n        const velocityAngle = (reflectedVelocity.x ? ( reflectedVelocity.x > 0 ? Math.atan( reflectedVelocity.y / reflectedVelocity.x): Math.PI + Math.atan( reflectedVelocity.y / reflectedVelocity.x) ): (reflectedVelocity.x > 0 ? 0 : Math.PI));\n\n        this._bulletObject.body.setVelocity(reflectedVelocity.y, reflectedVelocity.x)\n        this._bulletObject.rotation = (Math.PI/2) - velocityAngle;\n    }\n    \n}","import Phaser from 'phaser';\nimport { Angle, ANGLE_UNIT } from './angle'\nimport { Rectangle } from './rectangle';\nimport { Point, Vector } from './point';\nimport { Bullet } from './bullet';\n\nexport class Tank {\n    public static getObjectTrigoCoordinates(point: Point): Point{\n        /* To do move this to other helper */\n        return ({\n            x: point.y,\n            y: point.x\n        })\n    }\n\n    public destroyed: boolean = false;\n    private _containerObject: Phaser.GameObjects.Container;\n    private _vehicleObject: Phaser.Types.Physics.Arcade.SpriteWithDynamicBody;\n    private _cannonObject: Phaser.Types.Physics.Arcade.SpriteWithDynamicBody;\n    private _scene: Phaser.Scene;\n    private _velocity: number = 160;\n    private _angularVelocity: number = 80;\n\n    constructor(scene: Phaser.Scene, x: number = 0, y:number = 0) {\n        /* To do use point for x y coord */\n        this._scene = scene;\n\n        this._containerObject = this._scene.add.container(x, y);\n        this._containerObject.setSize(80,80)\n\n        this._vehicleObject = this._scene.add.sprite(0, 0, 'tank') as Phaser.Types.Physics.Arcade.SpriteWithDynamicBody;\n\n        this._cannonObject = this._scene.add.sprite(0, 0, 'cannon') as Phaser.Types.Physics.Arcade.SpriteWithDynamicBody;\n        this._cannonObject.setOrigin(0, 0.5);\n\n        this._scene.physics.world.enable(this._containerObject);\n        this._scene.physics.world.enable(this._vehicleObject);\n        this._scene.physics.world.enable(this._cannonObject);\n\n        this._containerObject.addAt(this._vehicleObject, 0);\n        this._containerObject.addAt(this._cannonObject, 1);\n    }\n\n    private _getObjectAsRectangle(object: Phaser.Physics.Arcade.Sprite): Rectangle {\n        const rotation = { \n            origin: Tank.getObjectTrigoCoordinates({ \n                x: object.body.x + object.originX * object.width,\n                y: object.body.y + object.originY * object.height\n            }),\n            angle: new Angle(- object.angle, ANGLE_UNIT.DEGREES)\n        }\n        const rectangle = new Rectangle(Tank.getObjectTrigoCoordinates(object.body.position), object.body.width, object.body.height, rotation);\n        return rectangle;\n    }\n\n    public setBulletObjectCollider(object: Phaser.GameObjects.GameObject | Phaser.GameObjects.GameObject[] | Phaser.GameObjects.Group | Phaser.GameObjects.Group[]) {\n        this._scene.physics.add.overlap(this._containerObject, object, (object1, object2) => this.bulletHitTest(object1, object2))\n    }\n\n    public bulletHitTest(object1: Phaser.Types.Physics.Arcade.GameObjectWithBody, object2: Phaser.Types.Physics.Arcade.GameObjectWithBody) {\n        const cannonRectangle = this._getObjectAsRectangle(this._cannonObject);\n        const vehicleRectangle = this._getObjectAsRectangle(this._vehicleObject);\n        const bulletRectangle = new Rectangle(Tank.getObjectTrigoCoordinates(object2.body.position), object2.body.width, object2.body.height)\n\n        const cannonHitsObstacle = cannonRectangle.getBounds().reduce((acc:boolean, point: Point) => bulletRectangle.isPointInside(point) || acc, false);\n        const vehicleHitsObstacle = vehicleRectangle.getBounds().reduce((acc:boolean, point: Point) => bulletRectangle.isPointInside(point) || acc, false);\n        const obstacleHitsVehicle = bulletRectangle.getBounds().reduce((acc:boolean, point: Point) => vehicleRectangle.isPointInside(point) || acc, false);\n        const obstacleHitsCannon = bulletRectangle.getBounds().reduce((acc:boolean, point: Point) => cannonRectangle.isPointInside(point) || acc, false);\n        \n        if(cannonHitsObstacle || obstacleHitsCannon || vehicleHitsObstacle || obstacleHitsVehicle){\n            this.destroy();\n        }\n    }\n\n    public setObstacleCollider(object: Phaser.GameObjects.GameObject | Phaser.GameObjects.GameObject[] | Phaser.GameObjects.Group | Phaser.GameObjects.Group[]) {\n        this._scene.physics.add.overlap(this._containerObject, object, (object1, object2) => this.colliderHitTest(object1, object2))\n    }\n\n    public colliderHitTest(object1: Phaser.Types.Physics.Arcade.GameObjectWithBody, object2: Phaser.Types.Physics.Arcade.GameObjectWithBody): void {\n        const cannonRectangle = this._getObjectAsRectangle(this._cannonObject);\n        const vehicleRectangle = this._getObjectAsRectangle(this._vehicleObject);\n        const obstacleRectangle = new Rectangle(Tank.getObjectTrigoCoordinates(object2.body.position), object2.body.width, object2.body.height)\n\n        const cannonHitsObstacle = cannonRectangle.getBounds().reduce((acc:boolean, point: Point) => obstacleRectangle.isPointInside(point) || acc, false);\n        const vehicleHitsObstacle = vehicleRectangle.getBounds().reduce((acc:boolean, point: Point) => obstacleRectangle.isPointInside(point) || acc, false);\n        const obstacleHitsVehicle = obstacleRectangle.getBounds().reduce((acc:boolean, point: Point) => vehicleRectangle.isPointInside(point) || acc, false);\n        const obstacleHitsCannon = obstacleRectangle.getBounds().reduce((acc:boolean, point: Point) => cannonRectangle.isPointInside(point) || acc, false);\n        \n        if(cannonHitsObstacle || obstacleHitsCannon || vehicleHitsObstacle || obstacleHitsVehicle){\n            const pushDirection: Vector = {\n                x: this._containerObject.x - object2.body.center.x,\n                y: this._containerObject.y - object2.body.center.y\n            }\n            this.pushTank(pushDirection, 3);\n        }\n    }\n    \n    public pushTank(directionVector: Vector, distance: number): void {\n        const vehiculeAngle: Angle = new Angle(this._vehicleObject.angle, ANGLE_UNIT.DEGREES);\n\n        this._containerObject.x = this._containerObject.x + Math.sign(directionVector.x) * Math.abs(vehiculeAngle.cos()) * distance;\n        this._containerObject.y = this._containerObject.y + Math.sign(directionVector.y) * Math.abs(vehiculeAngle.sin()) * distance;\n    }\n\n    public pointCannonToPoint(x: number, y: number) {\n        this._cannonObject.rotation = Phaser.Math.Angle.Between(this._containerObject.x, this._containerObject.y, x, y);\n    }\n\n    public moveToDirection(directionAngle: Angle) {\n        const vehiculeAngle: Angle = new Angle(this._vehicleObject.angle, ANGLE_UNIT.DEGREES);\n        const angleDiff: Angle = Angle.sum(vehiculeAngle, Angle.multiply(directionAngle, -1))\n        if (angleDiff.sin()**2 < 0.01 && angleDiff.cos()**2 > 0.81) {\n            this._vehicleObject.body.setAngularVelocity(0);\n            (this._containerObject.body as Phaser.Physics.Arcade.Body).setVelocity(directionAngle.cos() * this._velocity, directionAngle.sin() * this._velocity);\n        } else {\n            this._vehicleObject.body.setAngularVelocity(angleDiff.sin() * angleDiff.cos() < 0 ? this._angularVelocity : -this._angularVelocity);\n            (this._containerObject.body as Phaser.Physics.Arcade.Body).setVelocity(0, 0);\n        }        \n    }\n\n    public fire(x: number, y: number): Bullet {\n        /* to do use the point class as input */\n        const cannonAngle = new Angle(Phaser.Math.Angle.Between(this._containerObject.x, this._containerObject.y, x, y), ANGLE_UNIT.RADIANS);\n        const bulletStartPoint: Point = {\n            x: (this._containerObject.body as Phaser.Physics.Arcade.Body).center.x + cannonAngle.cos() * this._cannonObject.body.width,\n            y: (this._containerObject.body as Phaser.Physics.Arcade.Body).center.y + cannonAngle.sin() * this._cannonObject.body.width\n        }\n        const bullet = new Bullet(\n            this._scene, \n            bulletStartPoint, \n            250, \n            cannonAngle)\n        return bullet;\n    }\n\n    public stop() {\n        this._vehicleObject.body.setAngularVelocity(0);\n        (this._containerObject.body as Phaser.Physics.Arcade.Body).setVelocity(0, 0);\n    }\n\n    public destroy() {\n        this.destroyed = true;\n        this._vehicleObject.destroy()\n        this._cannonObject.destroy()\n        this._containerObject.destroy()\n    }\n}","import _ from 'lodash';\nimport Phaser from 'phaser';\nimport { Angle, ANGLE_UNIT } from '../angle';\nimport { Bullet } from '../bullet';\nimport { gamePreloadImages } from '../assets/constants';\nimport { Tank } from '../tank';\n\nfunction getDirectionAngle([top, right, bottom, left]: boolean[]): Angle{\n    enum DIRECTIONS {\n        TOP = -90,\n        TOPRIGHT = -45,\n        RIGHT = 0,\n        BOTTOMRIGHT = 45,\n        BOTTOM = 90,\n        BOTTOMLEFT = 135,\n        LEFT = 180,\n        TOPLEFT = -135,\n    }\n    if(_.isEqual([top, right, bottom, left], [true,false,false,false])) { return (new Angle(DIRECTIONS.TOP, ANGLE_UNIT.DEGREES)); } \n    if(_.isEqual([top, right, bottom, left], [true,true,false,false])) { return (new Angle(DIRECTIONS.TOPRIGHT, ANGLE_UNIT.DEGREES)); } \n    if(_.isEqual([top, right, bottom, left], [false,true,false,false])) { return (new Angle(DIRECTIONS.RIGHT, ANGLE_UNIT.DEGREES)); } \n    if(_.isEqual([top, right, bottom, left], [false,true,true,false])) { return (new Angle(DIRECTIONS.BOTTOMRIGHT, ANGLE_UNIT.DEGREES)); } \n    if(_.isEqual([top, right, bottom, left], [false,false,true,false])) { return (new Angle(DIRECTIONS.BOTTOM, ANGLE_UNIT.DEGREES)); } \n    if(_.isEqual([top, right, bottom, left], [false,false,true,true])) { return (new Angle(DIRECTIONS.BOTTOMLEFT, ANGLE_UNIT.DEGREES)); } \n    if(_.isEqual([top, right, bottom, left], [false,false,false,true])) { return (new Angle(DIRECTIONS.LEFT, ANGLE_UNIT.DEGREES)); } \n    if(_.isEqual([top, right, bottom, left], [true,false,false,true])) { return (new Angle(DIRECTIONS.TOPLEFT, ANGLE_UNIT.DEGREES)); } \n    throw new Error('Could not find the direction angle form input');\n}\n\nclass GameScene extends Phaser.Scene {\n    public obstacles!: Phaser.GameObjects.Group;\n    public cursors!: Phaser.Types.Input.Keyboard.CursorKeys;\n    public tank!: Tank;\n\n    constructor(){\n        super('gameScene');\n    }\n\n\tpreload() {\n        Object.values(gamePreloadImages).forEach((imagetoLoad) => this.load.image(imagetoLoad.name, imagetoLoad.path))\n\t}\n\n\tcreate() {\n        this.add.image(400, 250, 'background');\n\n        this.cursors = this.input.keyboard.createCursorKeys();\n\n        this.obstacles = this.physics.add.staticGroup();\n        this.obstacles.create(400, 350, 'obstacle');\n        this.obstacles.create(200, 150, 'obstacle');\n        this.obstacles.create(550, 150, 'obstacle');\n\n        this.tank = new Tank(this, 25, 20);\n        this.tank.setObstacleCollider(this.obstacles);\n\t}\n\n\tupdate() {\n        if (!this.tank.destroyed) {\n            let cursorsDirections = [this.cursors.up.isDown, this.cursors.right.isDown, this.cursors.down.isDown, this.cursors.left.isDown];\n            if(cursorsDirections[0] && cursorsDirections[2] || cursorsDirections[1] && cursorsDirections[3] || !cursorsDirections.reduce((a, b) => a || b, false)){\n                this.tank.stop();\n            } else {\n                this.tank.moveToDirection(getDirectionAngle(cursorsDirections))\n            }\n            let mousePointer = this.game.input.mousePointer;\n            this.tank.pointCannonToPoint(mousePointer.x, mousePointer.y); \n            if (mousePointer.leftButtonDown()) {\n                const bullet: Bullet = this.tank.fire(mousePointer.x, mousePointer.y);\n                bullet.setObstacleCollider(this.obstacles);\n                setTimeout(() => {\n                    bullet.setColliderWithTank(this.tank);\n                }, 500);\n            }\n        } else {\n            this.scene.switch('initScene');\n        }\n\t}\n}\n\nexport default GameScene;","import Phaser from 'phaser';\nimport { initPreloadImages } from '../assets/constants';\n\nclass InitScene extends Phaser.Scene {\n    constructor(){\n        super('initScene');\n    }\n\n    private _startGame() {\n        this.scene.switch('gameScene');\n    }\n\n\tpreload() {\n        Object.values(initPreloadImages).forEach((imagetoLoad) => this.load.image(imagetoLoad.name, imagetoLoad.path))\n\t}\n\n\tcreate() {\n        this.add.image(400, 250, 'init-background');\n\n        const text = this.add.text(350,250, 'Start the game');\n        text.setInteractive({ useHandCursor: true });\n        text.on('pointerdown', () => this._startGame());\n\t}\n}\n\nexport default InitScene;","import './game.scss';\nimport { Component } from 'react';\nimport Phaser from 'phaser';\nimport _ from 'lodash';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faArrowsAlt, faMouse, faMousePointer } from '@fortawesome/free-solid-svg-icons'\nimport GameScene from './scenes/gameScene';\nimport InitScene from './scenes/initScene';\n\nexport class Game extends Component {\n    componentDidMount() {\n        const config = {\n            type: Phaser.AUTO,\n            width: 800,\n            height: 500,\n            parent: 'game-canvas',\n            physics: {\n                default: 'arcade',\n                arcade: {\n                    debug: false\n                }\n            },\n        };\n        const gameScene = new GameScene();\n        const initScene = new InitScene();\n\n        const game = new Phaser.Game(config);\n\n        game.scene.add('gameScene', gameScene);\n        game.scene.add('initScene', initScene);\n        game.scene.start('initScene');\n    }\n\n    render() {\n        return (\n            <div className=\"game-container\"> \n                <div className=\"d-flex\">\n                    <div id=\"game-canvas\"></div>\n                    <div className=\"game-commands\">\n                        <div className=\"game-command\"> <FontAwesomeIcon icon={faArrowsAlt} className=\"fa-w-16 command-icon\"/> Move Tank </div>\n                        <div className=\"game-command\"> <FontAwesomeIcon icon={faMouse} className=\"fa-w-16 command-icon\"/> Left click to shoot bullets </div>\n                        <div className=\"game-command\"> <FontAwesomeIcon icon={faMousePointer} className=\"fa-w-16 command-icon\"/> Move mouse to move the cannon </div>\n                    </div>\n                </div>\n            </div>)\n    }\n}","import 'bootstrap/dist/css/bootstrap.css';\nimport './App.scss';\nimport { Game } from './game/game.tsx'\n\n\nfunction App() {\n  return (\n    <div className=\"app-container\">\n      <header class=\"w-75\">\n        <h3 class=\"float-md-start mb-0\">Tanks Game</h3>\n        <nav class=\"nav nav-masthead justify-content-center float-md-end\">\n          <a class=\"nav-link active\" aria-current=\"page\" href=\"#\">Play</a>\n          <a class=\"nav-link\" href=\"#\">Best scores</a>\n          <a class=\"nav-link\" href=\"#\">Forum</a>\n        </nav>\n      </header>\n      <Game/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}